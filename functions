#!/bin/bash
set -o errexit -o nounset -o pipefail
export LC_ALL=C
function -h {
  cat <<USAGE
   USAGE: script for iptables rules generation
    --apply rules are directly applied
    --save save firewall rules to /etc/
USAGE
}; function --help { -h ;}

function msg { out "$*" >&2 ;}
function out { printf '%s\n' "$*" ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}

function save {
  if [[ $save_rules = true && $test_run != true ]]; then
    save_fw
  fi
}

# args: tcp/udp port_number
function open_port {
  ipt -A input_new -p $1 -m multiport --destination-port $2 -j ACCEPT
}

# args: container_ip, port
# e.g.
#      cont_nat 10.0.0.2 5050       # forward public port 5050 -> 10.0.0.2:5050
#      cont_nat 10.0.0.2 5050 5051  # forward public port 5050 -> 10.0.0.2:5051
#      cont_nat 10.0.0.2 5050:5055  # forward public ports 5050:5055 -> 10.0.0.2
#
function cont_nat {
  if [[ $# -eq 2 ]]; then
    if [[ $2 == *:* ]]
    then
      dest="$1" # multiport source, target is just the IP address
    else
      dest="$1:$2"
    fi
  elif [[ $# -eq 3 ]]; then
    # we expect 3 arguments
    dest="$1:$3"
  else
    err "invalid number of arguments, expected 2 or 3"
    exit 1
  fi
  if [ -z "$PUBLIC_IP" ]; then
    err "PUBLIC_IP variable is not set!";
  fi

  iptn -A PREROUTING -p tcp -m tcp -d $PUBLIC_IP --dport $2 -j DNAT --to-destination $dest
  iptn -A OUTPUT -p tcp -m tcp -d $PUBLIC_IP --dport $2 -j DNAT --to-destination $dest
}

function save_fw {
  iptables-save > $TARGET
  msg "iptables saved to $TARGET"
}

function print_all {
  iptables -L -nv
  iptables -L -t nat -nv
}

function ipt {
  if [[ $test_run = true ]]; then
    msg "$*"
  else
    msg "${IPT} $*"
    `$IPT $*`
  fi
}

# add flag '-t nat'
function iptn {
  if [[ $test_run = true ]]; then
    msg "-t nat $*"
  else
    msg "${IPT} $*"
    `$IPT -t nat $*`
  fi
}

function main {
  while [[ $# -gt 0 ]]
  do
    case "$1" in                                      # Munging globals, beware
      --apply)              test_run=false; shift 1 ;;
      --save)               save_rules=true; test_run=false; shift 1 ;;
      *)                    err 'Argument error. Please see help: -h' ;;
    esac
  done
  if [[ $test_run == true ]]; then
    msg "### DRY RUN, COMMANDS TO BE APPLIED: ###"
  fi
  clean
  rules
  if [[ $test_run != true ]]; then
    msg "#### APPLIED FIREWALL RULES ###"
    print_all
    msg "### END RULES ###"
  fi
  save
  if [[ $test_run == true ]]; then
    msg "### CHECK IT CAREFULLY ###"
  fi
}

function clean {
  ipt -F
  ipt -X
  ipt -t nat -F
  ipt -t nat -X
}

